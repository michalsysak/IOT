<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TodoList - Moje zadania</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="app-container">
        <header class="app-header">
            <div class="header-content">
                <h1>üìù TodoList</h1>
                <div class="user-info">
                    <span id="welcomeMessage">Witaj, <span id="currentUser"></span>!</span>
                    <button class="btn btn-secondary" onclick="logout()">Wyloguj</button>
                </div>
            </div>
        </header>

        <main class="main-content">
            <div class="todo-form-section">
                <h2>Dodaj nowe zadanie</h2>
                <form id="todoForm" class="todo-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="todoTitle">Tytu≈Ç zadania</label>
                            <input type="text" id="todoTitle" name="title" required>
                        </div>
                        <div class="form-group">
                            <label for="todoDescription">Opis zadania</label>
                            <input type="text" id="todoDescription" name="description">
                        </div>
                        <button type="submit" class="btn btn-primary">Dodaj zadanie</button>
                    </div>
                </form>
                
                <div id="todoMessage" class="message" style="display: none;"></div>
            </div>

            <div class="todos-section">
                <div class="todos-header">
                    <h2>Twoje zadania</h2>
                    <button class="btn btn-secondary" onclick="loadTodos()">üîÑ Od≈õwie≈º</button>
                </div>
                
                <div id="loadingTodos" class="loading-message" style="display: none;">≈Åadowanie zada≈Ñ...</div>
                <div id="todosContainer">
                    <ul id="todosList" class="todos-list">
                        <!-- Zadania bƒôdƒÖ dodawane dynamicznie -->
                    </ul>
                    <div id="noTodos" class="no-todos" style="display: none;">
                        <p>Nie masz jeszcze ≈ºadnych zada≈Ñ. Dodaj pierwsze zadanie powy≈ºej!</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        const API_BASE_URL = window.location.origin;
        let currentUserId = localStorage.getItem('userId');
        let currentUsername = localStorage.getItem('username');

        // Sprawd≈∫ czy u≈ºytkownik jest zalogowany
        if (!currentUserId) {
            window.location.href = 'login.html';
        }

        // Ustaw nazwƒô u≈ºytkownika
        document.getElementById('currentUser').textContent = currentUsername;

        // Funkcja wylogowania
        function logout() {
            localStorage.removeItem('userId');
            localStorage.removeItem('username');
            window.location.href = 'login.html';
        }

        // Funkcja pokazywania komunikat√≥w
        function showMessage(message, type = 'success') {
            const messageDiv = document.getElementById('todoMessage');
            messageDiv.textContent = message;
            messageDiv.className = `message ${type}`;
            messageDiv.style.display = 'block';
            
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 3000);
        }

        // Dodawanie nowego zadania
        document.getElementById('todoForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const title = document.getElementById('todoTitle').value;
            const description = document.getElementById('todoDescription').value;
            
            try {
                const response = await fetch(`${API_BASE_URL}/todos`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-user-id': currentUserId
                    },
                    body: JSON.stringify({ title, description })
                });

                const data = await response.json();

                if (response.ok) {
                    showMessage('Zadanie zosta≈Ço dodane!', 'success');
                    document.getElementById('todoForm').reset();
                    loadTodos(); // Od≈õwie≈º listƒô zada≈Ñ
                } else {
                    showMessage(data.error || 'B≈ÇƒÖd podczas dodawania zadania', 'error');
                }
            } catch (error) {
                showMessage('B≈ÇƒÖd po≈ÇƒÖczenia z serwerem', 'error');
            }
        });

        // ≈Åadowanie zada≈Ñ
        async function loadTodos() {
            const loadingDiv = document.getElementById('loadingTodos');
            const todosList = document.getElementById('todosList');
            const noTodos = document.getElementById('noTodos');
            
            loadingDiv.style.display = 'block';
            
            try {
                const response = await fetch(`${API_BASE_URL}/todos`, {
                    headers: {
                        'x-user-id': currentUserId
                    }
                });

                const todos = await response.json();
                loadingDiv.style.display = 'none';

                if (response.ok) {
                    displayTodos(todos);
                } else {
                    showMessage(todos.error || 'B≈ÇƒÖd podczas ≈Çadowania zada≈Ñ', 'error');
                }
            } catch (error) {
                loadingDiv.style.display = 'none';
                showMessage('B≈ÇƒÖd po≈ÇƒÖczenia z serwerem', 'error');
            }
        }

        // Wy≈õwietlanie zada≈Ñ
        function displayTodos(todos) {
            const todosList = document.getElementById('todosList');
            const noTodos = document.getElementById('noTodos');
            
            todosList.innerHTML = '';
            
            if (todos.length === 0) {
                noTodos.style.display = 'block';
                return;
            }
            
            noTodos.style.display = 'none';
            
            todos.forEach(todo => {
                const todoItem = document.createElement('li');
                todoItem.className = 'todo-item';
                todoItem.innerHTML = `
                    <div class="todo-content">
                        <div class="todo-info">
                            <h3>${escapeHtml(todo.title)}</h3>
                            ${todo.description ? `<p>${escapeHtml(todo.description)}</p>` : ''}
                            <small class="todo-date">Utworzono: ${formatDate(todo.created_at)}</small>
                        </div>
                        <div class="todo-actions">
                            <button class="btn btn-danger btn-small" onclick="deleteTodo(${todo.id})">
                                üóëÔ∏è Usu≈Ñ
                            </button>
                        </div>
                    </div>
                `;
                todosList.appendChild(todoItem);
            });
        }

        // Usuwanie zadania
        async function deleteTodo(todoId) {
            if (!confirm('Czy na pewno chcesz usunƒÖƒá to zadanie?')) {
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {
                    method: 'DELETE',
                    headers: {
                        'x-user-id': currentUserId
                    }
                });

                const data = await response.json();

                if (response.ok) {
                    showMessage('Zadanie zosta≈Ço usuniƒôte!', 'success');
                    loadTodos(); // Od≈õwie≈º listƒô zada≈Ñ
                } else {
                    showMessage(data.error || 'B≈ÇƒÖd podczas usuwania zadania', 'error');
                }
            } catch (error) {
                showMessage('B≈ÇƒÖd po≈ÇƒÖczenia z serwerem', 'error');
            }
        }

        // Funkcje pomocnicze
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('pl-PL');
        }

        // Za≈Çaduj zadania przy starcie
        loadTodos();
    </script>
</body>
</html>
